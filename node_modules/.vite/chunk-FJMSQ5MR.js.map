{
  "version": 3,
  "sources": ["../vuetify/src/directives/mutate/index.ts", "../vuetify/src/directives/resize/index.ts", "../vuetify/src/directives/scroll/index.ts", "../vuetify/src/directives/touch/index.ts"],
  "sourcesContent": ["// Types\nimport type { DirectiveBinding, ObjectDirective } from 'vue'\nimport type { MutationOptions } from '@/composables/mutationObserver'\n\nexport interface MutationDirectiveBinding extends Omit<DirectiveBinding, 'modifiers' | 'value'> {\n  value: MutationCallback | { handler: MutationCallback, options?: MutationObserverInit }\n  modifiers: MutationOptions\n}\n\nfunction mounted (el: HTMLElement, binding: MutationDirectiveBinding) {\n  const modifiers = binding.modifiers || {}\n  const value = binding.value\n  const { once, immediate, ...modifierKeys } = modifiers\n  const defaultValue = !Object.keys(modifierKeys).length\n\n  const { handler, options } = typeof value === 'object'\n    ? value\n    : {\n      handler: value,\n      options: {\n        attributes: modifierKeys?.attr ?? defaultValue,\n        characterData: modifierKeys?.char ?? defaultValue,\n        childList: modifierKeys?.child ?? defaultValue,\n        subtree: modifierKeys?.sub ?? defaultValue,\n      },\n    }\n\n  const observer = new MutationObserver((\n    mutations: MutationRecord[] = [],\n    observer: MutationObserver\n  ) => {\n    handler?.(mutations, observer)\n\n    if (once) unmounted(el)\n  })\n\n  if (immediate) handler?.([], observer)\n\n  el._mutate = { observer }\n\n  observer.observe(el, options)\n}\n\nfunction unmounted (el: HTMLElement) {\n  el?._mutate?.observer?.disconnect()\n  delete el._mutate\n}\n\nexport const Mutate: ObjectDirective<HTMLElement> = {\n  mounted,\n  unmounted,\n}\n\nexport default Mutate\n", "import type { DirectiveBinding } from 'vue'\n\ninterface ResizeDirectiveBinding extends Omit<DirectiveBinding, 'modifiers'> {\n  value: () => void\n  modifiers?: {\n    active?: boolean\n    quiet?: boolean\n  }\n}\n\nfunction mounted (el: HTMLElement, binding: ResizeDirectiveBinding) {\n  const handler = binding.value\n  const options: AddEventListenerOptions = {\n    passive: !binding.modifiers?.active,\n  }\n\n  window.addEventListener('resize', handler, options)\n  el._onResize = {\n    handler,\n    options,\n  }\n\n  if (!binding.modifiers?.quiet) {\n    handler()\n  }\n}\n\nfunction unmounted (el: HTMLElement) {\n  if (!el._onResize) return\n\n  const { handler, options } = el._onResize\n  window.removeEventListener('resize', handler, options)\n  delete el._onResize\n}\n\nexport const Resize = {\n  mounted,\n  unmounted,\n}\n\nexport default Resize\n", "import type { DirectiveBinding } from 'vue'\n\ninterface ScrollDirectiveBinding extends Omit<DirectiveBinding, 'modifiers'> {\n  value: EventListener | {\n    handler: EventListener\n    options?: AddEventListenerOptions\n  } | EventListenerObject & { options?: AddEventListenerOptions }\n  modifiers?: {\n    self?: boolean\n  }\n}\n\nfunction mounted (el: HTMLElement, binding: ScrollDirectiveBinding) {\n  const { self = false } = binding.modifiers ?? {}\n  const value = binding.value\n  const options = (typeof value === 'object' && value.options) || { passive: true }\n  const handler = typeof value === 'function' || 'handleEvent' in value ? value : value.handler\n\n  const target = self\n    ? el\n    : binding.arg\n      ? document.querySelector(binding.arg)\n      : window\n\n  if (!target) return\n\n  target.addEventListener('scroll', handler, options)\n\n  el._onScroll = {\n    handler,\n    options,\n    // Don't reference self\n    target: self ? undefined : target,\n  }\n}\n\nfunction unmounted (el: HTMLElement) {\n  if (!el._onScroll) return\n\n  const { handler, options, target = el } = el._onScroll\n\n  target.removeEventListener('scroll', handler, options)\n  delete el._onScroll\n}\n\nfunction updated (el: HTMLElement, binding: ScrollDirectiveBinding) {\n  if (binding.value === binding.oldValue) return\n\n  unmounted(el)\n  mounted(el, binding)\n}\n\nexport const Scroll = {\n  mounted,\n  unmounted,\n  updated,\n}\n\nexport default Scroll\n", "// Types\nimport type {\n  DirectiveBinding,\n  ObjectDirective,\n} from 'vue'\n\n// Utilities\nimport { keys } from '@/util'\n\nexport interface TouchHandlers {\n  start?: (wrapperEvent: TouchEvent & TouchWrapper) => void\n  end?: (wrapperEvent: TouchEvent & TouchWrapper) => void\n  move?: (wrapperEvent: TouchEvent & TouchWrapper) => void\n  left?: (wrapper: TouchWrapper) => void\n  right?: (wrapper: TouchWrapper) => void\n  up?: (wrapper: TouchWrapper) => void\n  down?: (wrapper: TouchWrapper) => void\n}\n\nexport interface TouchWrapper extends TouchHandlers {\n  touchstartX: number\n  touchstartY: number\n  touchmoveX: number\n  touchmoveY: number\n  touchendX: number\n  touchendY: number\n  offsetX: number\n  offsetY: number\n}\n\nexport interface TouchValue extends TouchHandlers {\n  parent?: boolean\n  options?: AddEventListenerOptions\n}\n\nexport interface TouchStoredHandlers {\n  touchstart: (e: TouchEvent) => void\n  touchend: (e: TouchEvent) => void\n  touchmove: (e: TouchEvent) => void\n}\n\ninterface TouchDirectiveBinding extends Omit<DirectiveBinding, 'value'> {\n  value?: TouchValue\n}\n\nconst handleGesture = (wrapper: TouchWrapper) => {\n  const { touchstartX, touchendX, touchstartY, touchendY } = wrapper\n  const dirRatio = 0.5\n  const minDistance = 16\n  wrapper.offsetX = touchendX - touchstartX\n  wrapper.offsetY = touchendY - touchstartY\n\n  if (Math.abs(wrapper.offsetY) < dirRatio * Math.abs(wrapper.offsetX)) {\n    wrapper.left && (touchendX < touchstartX - minDistance) && wrapper.left(wrapper)\n    wrapper.right && (touchendX > touchstartX + minDistance) && wrapper.right(wrapper)\n  }\n\n  if (Math.abs(wrapper.offsetX) < dirRatio * Math.abs(wrapper.offsetY)) {\n    wrapper.up && (touchendY < touchstartY - minDistance) && wrapper.up(wrapper)\n    wrapper.down && (touchendY > touchstartY + minDistance) && wrapper.down(wrapper)\n  }\n}\n\nfunction touchstart (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchstartX = touch.clientX\n  wrapper.touchstartY = touch.clientY\n\n  wrapper.start?.({ ...event, ...wrapper })\n}\n\nfunction touchend (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchendX = touch.clientX\n  wrapper.touchendY = touch.clientY\n\n  wrapper.end?.({ ...event, ...wrapper })\n\n  handleGesture(wrapper)\n}\n\nfunction touchmove (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchmoveX = touch.clientX\n  wrapper.touchmoveY = touch.clientY\n\n  wrapper.move?.({ ...event, ...wrapper })\n}\n\nfunction createHandlers (value: TouchHandlers = {}): TouchStoredHandlers {\n  const wrapper = {\n    touchstartX: 0,\n    touchstartY: 0,\n    touchendX: 0,\n    touchendY: 0,\n    touchmoveX: 0,\n    touchmoveY: 0,\n    offsetX: 0,\n    offsetY: 0,\n    left: value.left,\n    right: value.right,\n    up: value.up,\n    down: value.down,\n    start: value.start,\n    move: value.move,\n    end: value.end,\n  }\n\n  return {\n    touchstart: (e: TouchEvent) => touchstart(e, wrapper),\n    touchend: (e: TouchEvent) => touchend(e, wrapper),\n    touchmove: (e: TouchEvent) => touchmove(e, wrapper),\n  }\n}\n\nfunction mounted (el: HTMLElement, binding: TouchDirectiveBinding) {\n  const value = binding.value\n  const target = value?.parent ? el.parentElement : el\n  const options = value?.options ?? { passive: true }\n  const uid = binding.instance?.$.uid // TODO: use custom uid generator\n\n  if (!target || !uid) return\n\n  const handlers = createHandlers(binding.value)\n\n  target._touchHandlers = target._touchHandlers ?? Object.create(null)\n  target._touchHandlers![uid] = handlers\n\n  keys(handlers).forEach(eventName => {\n    target.addEventListener(eventName, handlers[eventName], options)\n  })\n}\n\nfunction unmounted (el: HTMLElement, binding: TouchDirectiveBinding) {\n  const target = binding.value?.parent ? el.parentElement : el\n  const uid = binding.instance?.$.uid\n\n  if (!target?._touchHandlers || !uid) return\n\n  const handlers = target._touchHandlers[uid]\n\n  keys(handlers).forEach(eventName => {\n    target.removeEventListener(eventName, handlers[eventName])\n  })\n\n  delete target._touchHandlers[uid]\n}\n\nexport const Touch: ObjectDirective = {\n  mounted,\n  unmounted,\n}\n\nexport default Touch\n"],
  "mappings": "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",
  "names": []
}
